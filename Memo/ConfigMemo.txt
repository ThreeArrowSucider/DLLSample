[前準備]
VisualStudioにC++/cliを追加インストールしておく。

[ビルド設定変更点]
-ソリューション-構成マネージャ
-CsMain-プラットフォーム-新規作成
新しいプラットフォーム -x86
設定のコピー元 -AnyCPU

-ソリューション-構成マネージャ
-CsMain-プラットフォーム-新規作成
新しいプラットフォーム -x64
設定のコピー元 -AnyCPU

-ソリューション-構成マネージャ
CsMain	: Debug   x86 - AnyCPU -> x86
				: Debug   x64 - AnyCPU -> x64
				: Release x86 - AnyCPU -> x86
				: Release x64 - AnyCPU -> x64
				
-ソリューション-構成マネージャ
ReleaseとDebug両方、x86とx64すべての構成で
使用するプロジェクトのビルドにチェックを入れる

...C#のビルドは規定ではAnyCPUになっている（動作しているOSに合わせて32bit64bit切り替える）が
dllのビット数が違うと動かないのでビルド設定ごとに固定している。

-CsMain-プロパティ-ビルド
-対象プラットフォーム
構成 : すべての構成　プラットフォーム : x86
x86になっていることを確認

構成 : すべての構成　プラットフォーム : x64
x86 -> x64


-CsMain-ビルドの依存関係-プロジェクトの依存関係-依存先
CppCli - false -> true
-CppCli-ビルドの依存関係-プロジェクトの依存関係-依存先
CppProject - false -> true
...CppProject,CppCli,CsMainの順でビルドしてもらわないとdllの参照ができないので依存関係を設定している。

-ソリューション-スタートアッププロジェクトの設定-スタートアッププロジェクト
マルチスタートアッププロジェクト -> シングルスタートアッププロジェクト
CppProject -> CsMain
...F5実行時にdllもデバッグ実行しようとしてエラーウィンドウ出てきてイヤなので
C#プロジェクトのみデバッグ実行するように変更（ブレイクポイントとかはC++とかの方でもちゃんと効くので大丈夫）



[VisualStudio上でのプロジェクト設定変更点]
CppProject & CppCli
-プロパティ-構成プロパティ-全般-出力ディレクトリ
構成 : すべての構成　プラットフォーム : すべてのプラットフォーム
個別オプション -> $(SolutionDir)2_CsMain\bin\$(Configuration)\$(PlatformShortName)\netcoreapp3.1\

CsMain
-プロパティ-ビルド-出力パス
構成 : Release　プラットフォーム : x86
(空白) -> bin\Release\x86\
構成 : Release　プラットフォーム : x64
(空白) -> bin\Release\x64\
構成 : Debug　　プラットフォーム : x86
(空白) -> bin\Debug\x86\
構成 : Debug　　プラットフォーム : x64
(空白) -> bin\Debug\x64\
...出力先を構成とプラットフォームごとに全部1つのフォルダにまとめちゃう。
C#の方ですべての構成変更かけるとセーブしたら文字が消えちゃうけどちゃんと適用はされてるので大丈夫

CppProject
構成 : すべての構成　プラットフォーム : すべてのプラットフォーム
-プロパティ-構成プロパティ-全般-構成の種類
アプリケーション(.exe) -> ダイナミックライブラリ(.dll)
...dllで出力するように変更。CppCliは生成時点でdllになっているハズなので変更不要

CsMain
-プロパティ-デバッグ-ネイティブコードデバッグを有効にする
false -> true
...これを入れるとC++の方のデバッガでウォッチ式が使えるようになる。
使えなかったら...↓

CppProject&Cppcli
構成 : すべての構成　プラットフォーム : すべてのプラットフォーム
-プロパティ-構成プロパティ-デバッガーの種類
自動 -> 混合(.Net Core)
...自動で問題あれば直接混合指定してあげてください

CppCli
構成 : すべての構成　プラットフォーム : すべてのプラットフォーム
-プロパティ-構成プロパティ-全般-C++言語標準
規定(ISO C++14標準) -> ISO C++17標準
...C++のバージョンを17にしている。filesystem便利すぎるから… ここ17の機能使わなければ別に変えなくていいです。

CppProject&Cppcli
構成 : すべての構成　プラットフォーム : x86
-プロパティ-構成プロパティ-全般-ターゲット名
$(ProjectName) -> $(ProjectName)32

構成 : すべての構成　プラットフォーム : x64
-プロパティ-構成プロパティ-全般-ターゲット名
$(ProjectName) -> $(ProjectName)64
...ビットごとにdllを分けたいのでビット数を名前につける


参考にしたサイト...
TackKaiware様 : C#からC/C++の関数をコールする方法　まとめ①
https://qiita.com/TackKaiware/items/27ebcf10bb2624db197a
他